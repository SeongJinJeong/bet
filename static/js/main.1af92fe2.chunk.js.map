{"version":3,"sources":["redux/settingsAction.js","redux/index.js","Components/Setting.js","Components/GameScene.js","App.js","index.js"],"names":["initialState","data","combineReducers","settingState","state","action","type","chipPrice","connect","dispatch","setSettingsData","player","setChipPrice","price","props","useState","money","setMoney","person","setPerson","style","display","flexDirection","justifyContent","alignItems","height","src","width","color","fontSize","placeholder","value","onChange","e","target","borderRadius","textAlign","onClick","console","log","history","push","alert","marginTop","minWidth","minHeight","margin","betRangePlus","betRangeMinus","LogBox","logArray","toggleDrawer","length","className","map","index","fontWeight","LogLine","isPlus","text","UserBox","userData","handleUserData","handleLogArray","pid","isModalOpen","setIsModalOpen","handleModalClose","backgroundColor","userName","Modal","open","onClose","float","numberWithCommas","chips","ModalBody","name","prompt","setUserName","num","mount","parseInt","isNaN","setUserChips","ChipEditor","betPrice","flexWrap","ChipDiv","marginRight","border","marginBottom","window","confirm","PID","add","x","toString","replace","setUserData","openDrawer","setOpenDrawer","setLogArray","useEffect","userArray","i","tmpArray","setUserMoney","tmp","moment","format","position","right","top","Drawer","anchor","App","exact","path","component","Settings","GameScene","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1af92fe2.chunk.js","sourcesContent":["const SET_SETTINGS_DATA = \"settings/SET_SETTINGS_DATA\";\r\nconst SET_CHIP_PRICE = \"settings/SET_CHIP_PRICE\";\r\n\r\nexport const setSettingsData = (player, chipPrice) => ({\r\n  type: SET_SETTINGS_DATA,\r\n  data: {\r\n    player,\r\n    chipPrice,\r\n  },\r\n});\r\n\r\nexport const setChipPrice = (chipPrice) => ({\r\n  type: SET_CHIP_PRICE,\r\n  chipPrice: chipPrice,\r\n});\r\n\r\nconst initialState = {\r\n  data: {},\r\n};\r\n\r\nexport default function settingState(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_SETTINGS_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n      };\r\n    case SET_CHIP_PRICE:\r\n      return {\r\n        ...state,\r\n        chipPrice: action.chipPrice,\r\n      };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport settingState from \"./settingsAction\";\r\n\r\nexport default combineReducers({\r\n  settingState,\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setSettingsData, setChipPrice } from \"../redux/settingsAction\";\r\n\r\nfunction Settings(props) {\r\n  const [money, setMoney] = useState(null);\r\n  const [person, setPerson] = useState(null);\r\n\r\n  const handleChipPriceChange = (e) => {\r\n    setMoney(e.target.value);\r\n  };\r\n\r\n  const handlePersonChange = (e) => {\r\n    setPerson(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    console.log(\"MONEY : \" + money + \" PERSON : \" + person);\r\n    if (money && person !== null) {\r\n      props.setSettingsData(person, money);\r\n      props.history.push(\"/gameScene\");\r\n    } else {\r\n      alert(\"정확한 값을 입력해주세요!\");\r\n      setMoney(null);\r\n      setPerson(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100%\",\r\n      }}>\r\n      <img src=\"/betPage/nyang.png\" style={{ width: \"50%\", height: \"20%\" }} />\r\n      <h1 style={{ color: \"greenyellow\", fontSize: \"400%\" }}>준비하기</h1>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"플레이어 수를 입력하세요\"\r\n        value={person}\r\n        onChange={handlePersonChange}\r\n        style={{\r\n          width: \"80%\",\r\n          height: \"10%\",\r\n          borderRadius: \"10px 10px 10px 10px\",\r\n          fontSize: \"30px\",\r\n          textAlign: \"center\",\r\n        }}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"칩당 금액을 입력하세요\"\r\n        value={money}\r\n        onChange={handleChipPriceChange}\r\n        style={{\r\n          width: \"80%\",\r\n          height: \"10%\",\r\n          borderRadius: \"10px 10px 10px 10px\",\r\n          fontSize: \"30px\",\r\n          textAlign: \"center\",\r\n        }}\r\n      />\r\n      <button\r\n        onClick={handleSubmit}\r\n        style={{\r\n          marginTop: \"10%\",\r\n          minWidth: \"60px\",\r\n          minHeight: \"30px\",\r\n        }}>\r\n        시작!\r\n      </button>\r\n      <p />\r\n      <p />\r\n      <p\r\n        style={{\r\n          color: \"White\",\r\n        }}>\r\n        \" This App only run on AOS \"\r\n      </p>\r\n      <p style={{ margin: 0, color: \"red\" }}>\" Do not refresh the Page \"</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setSettingsData: (player, chipPrice) =>\r\n    dispatch(setSettingsData(player, chipPrice)),\r\n  setChipPrice: (price) => dispatch(setChipPrice(price)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Settings);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport moment from \"moment\";\r\n\r\nconst betRangePlus = [32, 64, 128, 256, 512, 1024, 2048, 100];\r\nconst betRangeMinus = [-32, -64, -128, -256, -512, -1024, -2048, -100];\r\n\r\nconst GameScene = (props) => {\r\n  const [userData, setUserData] = useState([]);\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n  const [logArray, setLogArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const userArray = [];\r\n    for (var i = 0; i < props.player; i++) {\r\n      userArray.push({\r\n        PID: i,\r\n        userName: i + 1,\r\n        chips: 0,\r\n        // money: userArray[i].chips * userArray[i].chipPrice,\r\n        chipPrice: props.chipPrice,\r\n      });\r\n    }\r\n    setUserData(userArray);\r\n  }, [props.chipPrice, props.player]);\r\n\r\n  console.log(props);\r\n\r\n  const handleUserData = {\r\n    setUserName: (pid, i) => {\r\n      let tmpArray = userData;\r\n      tmpArray[pid].userName = i;\r\n      setUserData(tmpArray);\r\n    },\r\n    setUserChips: (pid, i) => {\r\n      let tmpArray = userData;\r\n      tmpArray[pid].chips = tmpArray[pid].chips + i;\r\n      setUserData(tmpArray);\r\n    },\r\n    setUserMoney: (pid) => {\r\n      let tmpArray = userData;\r\n      // tmpArray[pid].money = tmpArray[pid].money + i;\r\n      tmpArray[pid].money = tmpArray[pid].chips * tmpArray[pid].chipPrice;\r\n      setUserData(tmpArray);\r\n    },\r\n  };\r\n\r\n  const handleLogArray = {\r\n    add: (player, money) => {\r\n      let tmp = logArray;\r\n      tmp.push({\r\n        text: `${moment().format(\r\n          \"ddd, h:mm:ss A\"\r\n        )} : ${player} 의 칩이 ${money} 만큼 합산됨`,\r\n        isPlus: money > 0 ? true : false,\r\n      });\r\n      setLogArray(tmp);\r\n    },\r\n  };\r\n\r\n  const toggleDrawer = () => {\r\n    setOpenDrawer(!openDrawer);\r\n  };\r\n\r\n  return userData.length > 0 ? (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          flexWrap: \"wrap\",\r\n          alignItems: \"center\",\r\n          width: \"90%\",\r\n          height: \"90%\",\r\n          border: \"2px solid white\",\r\n        }}>\r\n        <button\r\n          style={{\r\n            position: \"absolute\",\r\n            width: \"8vh\",\r\n            height: \"5vh\",\r\n            right: 0,\r\n            top: 0,\r\n          }}\r\n          onClick={toggleDrawer}>\r\n          See Log\r\n        </button>\r\n        <Drawer anchor=\"right\" open={openDrawer} onClose={toggleDrawer}>\r\n          <LogBox logArray={logArray} toggleDrawer={toggleDrawer} />\r\n        </Drawer>\r\n        {userData.map((value, index) => {\r\n          return (\r\n            <>\r\n              <UserBox\r\n                userData={value}\r\n                handleUserData={handleUserData}\r\n                handleLogArray={handleLogArray}\r\n                pid={index}\r\n              />{\" \"}\r\n              {/* UserBox 컴포넌트에 해당 유저의 정보 객체로 전달, 유저 데이터 정보 수정 함수 전달 */}\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <p style={{ color: \"white\" }}>\"LOADING\"</p>\r\n  );\r\n};\r\n\r\nconst LogBox = ({ logArray, toggleDrawer }) => {\r\n  return logArray.length > 0 ? (\r\n    <div className=\"asdf\" onClick={toggleDrawer} style={{ minHeight: \"100%\" }}>\r\n      {logArray.map((value, index) => {\r\n        return <LogLine log={value} />;\r\n      })}\r\n    </div>\r\n  ) : (\r\n    <p style={{ fontWeight: \"bold\", color: \"red\" }}>log is empty</p>\r\n  );\r\n};\r\n\r\nconst LogLine = ({ log }) => {\r\n  return (\r\n    <p\r\n      style={{\r\n        color: log.isPlus ? \"Green\" : \"red\",\r\n        fontWeight: \"bold\",\r\n        margin: \"0px 10px\",\r\n        marginTop: \"5px\",\r\n      }}>\r\n      {log.text}\r\n    </p>\r\n  );\r\n};\r\n\r\nconst UserBox = ({ userData, handleUserData, handleLogArray, pid }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  console.log(userData);\r\n  const handleModalOpen = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n  const handleModalClose = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"yellowgreen\",\r\n            borderRadius: \"10%\",\r\n            margin: \"20px\",\r\n          }}\r\n          onClick={handleModalOpen}>\r\n          <span\r\n            style={{\r\n              margin: \"10px\",\r\n              fontSize: \"20px\",\r\n              color: \"darkblue\",\r\n              fontWeight: \"bolder\",\r\n            }}>\r\n            {userData.userName}\r\n          </span>\r\n        </div>\r\n\r\n        <Modal\r\n          open={isModalOpen}\r\n          onClose={handleModalClose}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}>\r\n          <ModalBody\r\n            pid={pid}\r\n            handleUserData={handleUserData}\r\n            userData={userData}\r\n            handleModalClose={handleModalClose}\r\n            handleLogArray={handleLogArray}\r\n          />\r\n        </Modal>\r\n      </div>\r\n      <span\r\n        style={{\r\n          color: \"white\",\r\n          marginTop: \"-10px\",\r\n          fontSize: \"20px\",\r\n          fontWeight: \"bolder\",\r\n          float: \"left\",\r\n        }}>\r\n        {\"₩ \" + numberWithCommas(userData.chips * userData.chipPrice)}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ModalBody = ({\r\n  pid,\r\n  handleUserData,\r\n  userData,\r\n  handleModalClose,\r\n  handleLogArray,\r\n}) => {\r\n  console.log(pid);\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"80%\",\r\n        height: \"80%\",\r\n        backgroundColor: \"white\",\r\n        // margin: \"10% 10%\",\r\n\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n      className={pid}>\r\n      <h1\r\n        style={{\r\n          fontWeight: \"bolder\",\r\n          color: \"red\",\r\n        }}>\r\n        창을 껏다켜야 동기화가 됩니다.\r\n      </h1>\r\n      <p\r\n        onClick={() => {\r\n          let name = prompt(\"이름을 입력하세요.\", userData.userName);\r\n          if (name == null) {\r\n            alert(\"Canceled!\");\r\n          } else {\r\n            alert(\"Confirmed!\");\r\n            handleUserData.setUserName(pid, name);\r\n          }\r\n        }}>\r\n        이름 : {userData.userName}\r\n      </p>\r\n      <p>보유 칩 : {userData.chips}</p>\r\n      <p>\r\n        소지금 : {\"₩ \" + numberWithCommas(userData.chips * userData.chipPrice)}\r\n      </p>\r\n      <button\r\n        onClick={() => {\r\n          let num = prompt(\"칩 갯수를 입력하세요.\", 0);\r\n          let mount = parseInt(num);\r\n          if (mount !== 0 && typeof mount === \"number\" && !isNaN(mount)) {\r\n            handleUserData.setUserChips(pid, mount);\r\n            handleLogArray(userData.userName, mount);\r\n            alert(\"Confirmed!\");\r\n          } else {\r\n            alert(\"Fuck You!\");\r\n            return;\r\n          }\r\n        }}>\r\n        칩 입력\r\n      </button>\r\n      <p />\r\n      <ChipEditor\r\n        handleUserData={handleUserData}\r\n        userData={userData}\r\n        handleLogArray={handleLogArray}\r\n      />\r\n      <button onClick={handleModalClose}>닫기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChipEditor = ({ userData, handleUserData, handleLogArray }) => {\r\n  return (\r\n    <>\r\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n        {betRangePlus.map((value, index) => {\r\n          return (\r\n            <ChipDiv\r\n              betPrice={value}\r\n              isPlus={true}\r\n              handleUserData={handleUserData}\r\n              userData={userData}\r\n              handleLogArray={handleLogArray}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexWrap: \"wrap\",\r\n          marginTop: \"10px\",\r\n        }}>\r\n        {betRangeMinus.map((value, index) => {\r\n          return (\r\n            <ChipDiv\r\n              betPrice={value}\r\n              isPlus={false}\r\n              handleUserData={handleUserData}\r\n              userData={userData}\r\n              handleLogArray={handleLogArray}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ChipDiv = ({\r\n  betPrice,\r\n  isPlus,\r\n  handleUserData,\r\n  userData,\r\n  handleLogArray,\r\n}) => {\r\n  const setUserChip = () => {\r\n    const isConf = window.confirm(betPrice + \" 만큼의 금액을 추가함?\");\r\n    if (isConf == true) {\r\n      handleUserData.setUserChips(userData.PID, betPrice);\r\n      handleLogArray.add(userData.userName, betPrice);\r\n      // props.handleUserData.setUserMoney(props.userData.PID);\r\n    } else {\r\n      return;\r\n    }\r\n    console.log(userData);\r\n  };\r\n  return (\r\n    <button\r\n      style={{\r\n        backgroundColor: isPlus ? \"green\" : \"palevioletred\",\r\n        marginRight: \"5px\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n        border: \"1px solid \",\r\n        minWidth: \"10%\",\r\n        minHeight: \"10%\",\r\n        marginBottom: isPlus ? null : \"10px\",\r\n      }}\r\n      onClick={setUserChip}>\r\n      <p style={{ color: \"black\", fontWeight: \"bolder\" }}>{betPrice}</p>\r\n    </button>\r\n  );\r\n};\r\n\r\nfunction numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  player: parseInt(state.settingState.data.player),\r\n  chipPrice: parseInt(state.settingState.data.chipPrice),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(GameScene);\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport Settings from \"./Components/Setting\";\nimport GameScene from \"./Components/GameScene\";\n\nfunction App() {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"black\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}>\n      <Route exact path=\"/betPage\" component={Settings} />\n      <Route path=\"/gameScene\" component={GameScene} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport rootReducer from \"./redux\";\nimport App from \"./App\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}